import json
import redis
import psycopg2
import numpy as np
import os
import atexit
from fastapi.responses import JSONResponse
from fastapi import FastAPI, HTTPException, Request, Depends
from pydantic import BaseModel
import bcrypt
from stable_baselines3 import PPO
from lib.services.scrabble_env import ScrabbleEnv
from psycopg2 import pool
import random
from collections import Counter
from typing import List, Optional
import time
import uuid
import base64
import smtplib
from email.mime.text import MIMEText
from gym import spaces
from datetime import datetime 
from lib.services.game_state import load_game_state, save_game_state

env = ScrabbleEnv()
app = FastAPI()

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
EMAIL_SENDER = "teramate3030@gmail.com"
EMAIL_PASSWORD = "oabp qtmx mnke mfcd" 

# ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Redis
try:
    redis_client = redis.StrictRedis(
        host="localhost",
        port=6379,
        db=0,
        decode_responses=True,
        socket_timeout=5,  # ‡∏ï‡∏±‡πâ‡∏á Timeout 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        retry_on_timeout=True  # ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤ Timeout
    )
    print("‚úÖ Connected to Redis")
except Exception as e:
    print(f"‚ùå Redis Connection Error: {e}")
    redis_client = None

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL (‡πÉ‡∏ä‡πâ Connection Pool)
DB_CONFIG = {
    "user": "starmemory",
    "password": "12345678",
    "host": "127.0.0.1",
    "port": "5432",
    "database": "crossword_db"
}

try:
    db_pool = psycopg2.pool.ThreadedConnectionPool(
        minconn=5,  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Connection ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
        maxconn=20,  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Connection ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        **DB_CONFIG
    )
    print("‚úÖ Connected to PostgreSQL")
except Exception as e:
    print(f"‚ùå PostgreSQL Connection Error: {e}")
    db_pool = None

def get_db_connection():
    conn = db_pool.getconn()
    if conn is None:
        raise HTTPException(status_code=500, detail="Database connection failed")
    return conn

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô Connection ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Pool
def release_db_connection(conn):
    if conn:
        db_pool.putconn(conn)

# ‚úÖ ‡πÉ‡∏ä‡πâ FastAPI Dependency Injection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Connection ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
def get_db():
    conn = get_db_connection()
    try:
        yield conn
    finally:
        release_db_connection(conn)  # ‡∏Ñ‡∏∑‡∏ô Connection ‡πÄ‡∏™‡∏°‡∏≠

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI
model_path = os.path.join(os.path.dirname(__file__), "bot005.zip")
model = PPO.load(model_path) if os.path.exists(model_path) else None

class GameStateRequest(BaseModel):
    game_id: str
    board: List[List[str]]
    rack_player: List[str] 
    rack_player2: List[str]  
    tile_bag: List[str]
    playedWords: List[dict] = []  
    last_move_by: str
    
# üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Flutter
class BotMoveRequest(BaseModel):
    game_id: str
    board: list
    rack_player2: Optional[List[str]] = None  # ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ rack ‡πÄ‡∏õ‡πá‡∏ô Optional
    difficulty: str
    
class RegisterUser(BaseModel):
    username: str
    email: str
    password: str
    
class LoginRequest(BaseModel):
    username: str
    password: str

class ProfileUpdate(BaseModel):
    user_id: str
    profile_image: str  # Base64 encoded image

class GameSaveRequest(BaseModel):
    user_id: str
    level_id: int | None = None  # ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á
    room_id: int | None = None  # ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢
    game_mode: str  # 'a' = ‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢, 'c' = ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á
    start_at: str  # ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°

class EmailRequest(BaseModel):
    to: str
    link: str
    
def generate_user_id():
    return str(uuid.uuid4())

used_words = set()  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÑ‡∏õ

@app.post("/register")
def register_user(user: RegisterUser):
    conn = get_db_connection()
    cursor = conn.cursor()

    user_id = generate_user_id()

    hashed_password = bcrypt.hashpw(user.password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    # üîπ Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞ Insert
    print(f"Registering user: user_id={user_id}, username={user.username}, email={user.email}")

    try:
        cursor.execute("INSERT INTO users (user_id, username, email, password) VALUES (%s, %s, %s, %s)",
                       (user_id, user.username.strip(), user.email.strip(), hashed_password))
        conn.commit()

        # üîπ Debug: ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤ Insert ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        print(f"User {user_id} inserted into database!")

        return {"message": "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "user_id": user_id}
    except Exception as e:
        conn.rollback()

        print(f" Failed to register user: {str(e)}")

        raise HTTPException(status_code=400, detail=f"Error: {str(e)}")
    finally:
        cursor.close()
        release_db_connection(conn)

@app.post("/request_password_reset")
async def request_password_reset(request: Request):
    data = await request.json()
    email = data.get("email")

    print(f"‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ email: {email}")

    if not email:
        raise HTTPException(status_code=400, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠")

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("SELECT password FROM users WHERE email = %s", (email,))
        user = cursor.fetchone()

        if not user:
            print("ERROR ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            raise HTTPException(status_code=400, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

        user_password = user[0]  

        send_email(email, user_password)

        return {"success": True, "message": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"}

    except Exception as e:
        print(f"ERROR {e}")
        raise HTTPException(status_code=500, detail="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")

    finally:
        cursor.close()
        conn.close()

def send_email(to_email, user_password):
    print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà {to_email}...")

    msg = MIMEText(f"""
    <html>
        <body>
            <p>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            <p><strong>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</strong> {user_password}</p>
            <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠</p>
        </body>
    </html>
    """, "html")

    msg["Subject"] = "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
    msg["From"] = EMAIL_SENDER
    msg["To"] = to_email

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_SENDER, EMAIL_PASSWORD)
        server.sendmail(EMAIL_SENDER, to_email, msg.as_string())
        server.quit()
        print("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ: {e}")


# ‚úÖ API Login ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ & ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
@app.post("/login")
def login(request: LoginRequest):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # üîπ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cursor.execute("SELECT user_id, password FROM users WHERE email = %s", (request.username,))
        user = cursor.fetchone()

        if not user:
            raise HTTPException(status_code=400, detail="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

        user_id, hashed_password = user

        # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô DB
        if bcrypt.checkpw(request.password.encode("utf-8"), hashed_password.encode("utf-8")):
            return {"message": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "user_id": user_id}
        else:
            raise HTTPException(status_code=400, detail="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    except Exception as e:
        return {"error": str(e)}
    finally:
        cursor.close()
        conn.close()

@app.post("/upload_profile")
def upload_profile(data: ProfileUpdate):
    user_id = data.user_id
    try:
        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base64 ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ö‡∏ï‡πå
        image_data = base64.b64decode(data.profile_image.split(",")[-1])  # ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô `data:image/png;base64,` ‡∏≠‡∏≠‡∏Å
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"‚ùå Base64 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("UPDATE users SET profile_image = %s WHERE user_id = %s", (image_data, user_id))
        conn.commit()
        return {"success": True, "message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}
    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Database Error: {str(e)}")
    finally:
        cursor.close()
        conn.close()


@app.get("/get_user/{user_id}")
def get_user(user_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT username, email, stage_level, profile_image FROM users WHERE user_id = %s", (user_id,))
    row = cursor.fetchone()
    
    cursor.close()
    conn.close()

    if row:
        user = {
            "username": row[0],
            "email": row[1],
            "stage_level": row[2],
            "profile_image": f"data:image/png;base64,{base64.b64encode(row[3]).decode('utf-8')}" if row[3] else None
        }
        return user
    
    raise HTTPException(status_code=404, detail="User not found")


    
# üìå API `/bot_move` ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏•‡πà‡∏ô Scrabble
@app.post("/bot_move")
async def get_bot_move(request: BotMoveRequest):
    print(f"üîπ Received request for game {request.game_id}")

    # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å Redis
    env = load_game_state(request.game_id)

    if env is None:
        env = ScrabbleEnv(
            game_id=request.game_id,
            board=request.board,
            rack_bot=request.rack_player2,  # ‚úÖ ‡πÉ‡∏ä‡πâ rack ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            tile_bag=request.tile_bag
        )
    else:
        env.rack_bot = request.rack_player2

    move = env.select_word_from_rack()
    print(f"üìñ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏ó: {move}")

    if move and move["move"] == "play":
        word, (row, col, direction) = move["word"], move["position"]
        success = env.place_word(word, row, col, direction)

        if success:
            env.remove_used_letters(word, row, col, direction)
            save_game_state(request.game_id, env)  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà

            return {
                "game_state": env.get_game_state(),
                "word": word,
                "position": [row, col],
                "direction": direction,
                "score": env.calculate_score(word, row, col, direction),
                "new_rack": env.rack  # ‚úÖ ‡∏™‡πà‡∏á rack ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            }

    return {"message": "No valid move found"}

@app.get("/game_state")
async def get_game_state():
    env = load_game_state("scrabble_game03")
    if env is None:
        return JSONResponse(status_code=404, content={"message": "Game state not found"})

    game_state = env.get_game_state()

    print(f"üì° [DEBUG] game_state ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ Flutter:\n{json.dumps(game_state, indent=2, ensure_ascii=False)}")

    return JSONResponse(
        status_code=200,
        content={
            "board": game_state["board"],
            "rack_player1": game_state.get("rack_player1", []),
            "rack_player2": game_state.get("rack_player2", []), 
            "tile_bag": game_state["tile_bag"],
            "playedWords": game_state.get("playedWords", []), 
            "last_move_by": game_state.get("last_move_by", "")
        }
    )

@app.get("/get_user_history/{user_id}")
def get_user_history(user_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM user_historys WHERE user_id = %s", (user_id,))
    total_games = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM user_historys WHERE user_id = %s AND result = TRUE", (user_id,))
    total_wins = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM user_historys WHERE user_id = %s AND result = FALSE", (user_id,))
    total_loses = cursor.fetchone()[0]

    cursor.close()
    conn.close()

    win_rate = (total_wins / total_games * 100) if total_games > 0 else 0

    return {
        "total_games": total_games,
        "total_wins": total_wins,
        "total_loses": total_loses,
        "win_rate": round(win_rate, 2)
    }

@app.post("/save_game")
async def save_game(data: GameSaveRequest):
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        query = """
        INSERT INTO games (user_id, level_id, room_id, game_mode, start_at)
        VALUES (%s, %s, %s, %s, %s)
        RETURNING game_id;  -- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ game_id ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
        """
        values = (
            data.user_id,
            data.level_id if data.level_id is not None else None,
            data.room_id if data.room_id is not None else None,
            data.game_mode,
            data.start_at
        )

        cursor.execute(query, values)
        game_id = cursor.fetchone()[0]  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ game_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        conn.commit()

        return {"message": "‚úÖ ‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "game_id": game_id}

    except Exception as e:
        conn.rollback()
        raise HTTPException(status_code=500, detail=f"‚ùå Error saving game: {str(e)}")
    finally:
        cursor.close()
        conn.close()

        
@app.post("/save_game_state")
async def save_state(request: GameStateRequest):
    try:
        print(f"üíæ [SAVE] ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: board = {request.board}")  # ‚úÖ Debug ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü
        
        board_to_save = request.board.tolist() if isinstance(request.board, np.ndarray) else request.board

        env_data = {
            "board": board_to_save,
            "rack_player1": request.rack_player,  # ‚úÖ ‡πÉ‡∏ä‡πâ rack ‡∏Ç‡∏≠‡∏á Player 1
            "rack_player2": request.rack_player2,
            "tile_bag": request.tile_bag,
            "playedWords": request.playedWords,  
            "last_move_by": request.last_move_by
        }

        redis_client.delete(request.game_id)  # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ã‡∏ü
        redis_client.set(request.game_id, json.dumps(env_data))  # ‚úÖ ‡πÄ‡∏ã‡∏ü‡πÉ‡∏´‡∏°‡πà
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        saved_data = redis_client.get(request.game_id)
        print(f"‚úÖ [SAVE] ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Redis: {saved_data}")  # ‚úÖ Debug ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ã‡∏ü

        return {"message": f"‚úÖ Game state {request.game_id} saved successfully"}

    except Exception as e:
        return HTTPException(status_code=500, detail=f"Server error: {str(e)}")

@app.get("/get_user/{user_id}")
def get_user(user_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT username, email, stage_level, profile_image FROM users WHERE user_id = %s", (user_id,))
    row = cursor.fetchone()
    
    cursor.close()
    conn.close()

    if row:
        user = {
            "username": row[0],
            "email": row[1],
            "stage_level": row[2],
            "profile_image": base64.b64encode(row[3]).decode('utf-8') if row[3] else None
        }
        print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user}")
        return user
    
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö user_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    raise HTTPException(status_code=404, detail="User not found")




# ‚úÖ API `/clear_state/{game_id}` ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Redis
@app.delete("/clear_state/{game_id}")
def clear_game_state(game_id: str):
    redis_client.delete(game_id)
    return {"status": "success", "message": f"Game state {game_id} cleared"}

def load_words_to_redis():
    """
    ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Redis
    """
    connection = get_db_connection()
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT word_name FROM words;")
        words = [row[0].upper() for row in cursor.fetchall()]
        
        # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Redis
        redis_client.set("cached_words", json.dumps(words))
        redis_client.expire("cached_words", 3600)  # ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        print(f"‚úÖ Cached {len(words)} words in Redis")
    
    finally:
        cursor.close()
        release_db_connection(connection)

@app.get("/words")
def get_words():
    try:
        # ‚úÖ ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å Redis ‡∏Å‡πà‡∏≠‡∏ô
        cached_words = redis_client.get("cached_words")
        if cached_words:
            print("‚úÖ Loaded words from Redis cache")
            return {"data": json.loads(cached_words)}

        # ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Redis -> ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        load_words_to_redis()

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Redis ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        cached_words = redis_client.get("cached_words")
        if cached_words:
            return {"data": json.loads(cached_words)}

        return {"status": "Failed", "error": "Failed to load words from database and cache"}

    except Exception as e:
        print(f"‚ùå Error fetching words: {e}")
        return {"status": "Failed", "error": str(e)}



def close_db_pool():
    if db_pool:
        db_pool.closeall()
        print("üõë Connection Pool Closed")

atexit.register(close_db_pool)

# ‚úÖ ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå FastAPI
if __name__ == "__main__":
    load_words_to_redis()
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
