import gym
import numpy as np
import random
from collections import Counter
import psycopg2  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PostgreSQL
from gym import spaces  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î Action Space ‡πÉ‡∏ô Reinforcement Learning


class ScrabbleEnv(gym.Env):
    
    def load_word_database(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å PostgreSQL"""
        word_set = set()  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡πà‡∏≠‡∏ô
        
        try:
            connection = psycopg2.connect(
                user="starmemory",
                password="12345678",
                host="127.0.0.1",
                port="5432",
                database="crossword_db"
            )
            with connection.cursor() as cursor:
                cursor.execute('SELECT "word_name" FROM words;')  
                word_set = {row[0].lower() for row in cursor.fetchall()}  

            print(f"üìñ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(word_set)} ‡∏Ñ‡∏≥")

        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
        
        finally:
            if connection:
                connection.close()
        
        return word_set  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ set() ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå

    def __init__(self, game_id=None, board=None, rack=None, tile_bag=None):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Scrabble Environment"""
        super(ScrabbleEnv, self).__init__()

        # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
        self.word_database = self.load_word_database()
        self.game_id = game_id

        # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å game_state
        self.board = np.array(board) if board is not None else np.full((15, 15), "", dtype=object)
        self.tile_bag = tile_bag if tile_bag is not None else self.generate_tile_bag()
        
        # ‚úÖ ‡πÉ‡∏ä‡πâ rack ‡∏à‡∏≤‡∏Å game_state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ draw_tiles()
        self.rack = rack if rack is not None else []
        
        self.is_first_move = True  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        self.score = 0  # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô

        self.setup_board_layout()
        # ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ö‡∏≠‡∏ó‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
        self.action_space = spaces.MultiDiscrete([15, 15, 2])  # (row, col, direction)
        self.observation_space = spaces.Box(low=0, high=1, shape=(15, 15), dtype=np.int32)

        print(f"‚úÖ Scrabble Environment Initialized!")
        print(f"üîπ Rack ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: {self.rack}")
        print(f"üîπ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Tiles ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {len(self.tile_bag)}")


    def reset(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà"""
        
        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏°‡πà
        self.tile_bag = self.generate_tile_bag()
        
        # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡∏°‡πà
        self.board = np.full((15, 15), "", dtype=object)  # ‡πÉ‡∏ä‡πâ "" ‡πÅ‡∏ó‡∏ô 0
        self.setup_board_layout()

        # ‚úÖ ‡∏™‡∏∏‡πà‡∏° Rack ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
        self.rack = self.draw_tiles(7)

        # ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
        self.is_first_move = True  
        self.score = 0  

        print("üîÑ ‡πÄ‡∏Å‡∏°‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï!")
        print(f"üîπ Rack ‡πÉ‡∏´‡∏°‡πà: {self.rack}")
        print(f"üîπ Tile Bag ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {len(self.tile_bag)}")

        # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ state ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ RL)
        return self.get_state()

    def generate_tile_bag(self):
        """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scrabble ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î """
        tile_distribution = {
            'A': 9, 'B': 2, 'C': 2, 'D': 4, 'E': 12, 'F': 2, 'G': 3, 'H': 2,
            'I': 9, 'J': 1, 'K': 1, 'L': 4, 'M': 2, 'N': 6, 'O': 8, 'P': 2,
            'Q': 1, 'R': 6, 'S': 4, 'T': 6, 'U': 4, 'V': 2, 'W': 2, 'X': 1,
            'Y': 2, 'Z': 1
        }

        tile_bag = []
        for letter, count in tile_distribution.items():
            tile_bag.extend([letter] * count)  # ‚úÖ ‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

        random.shuffle(tile_bag)  # ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        print(f"üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(tile_bag)}")
        return tile_bag

    def draw_tiles(self, count=7):
        """‡πÄ‡∏ï‡∏¥‡∏° rack ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å tile_bag ‡∏à‡∏ô‡πÄ‡∏ï‡πá‡∏° 7 ‡∏ï‡∏±‡∏ß"""

        if self.rack is None:
            self.rack = []
        
        print(f"üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Tile ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô bag: {len(self.tile_bag)}")  

        while len(self.rack) < count and self.tile_bag:
            new_tile = self.tile_bag.pop(0)
            self.rack.append(new_tile)
            print(f"üü¢ ‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ '{new_tile}' ‡πÄ‡∏Ç‡πâ‡∏≤ rack (‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {len(self.tile_bag)} ‡∏ï‡∏±‡∏ß)")

        print(f"‚úÖ Rack ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏¥‡∏°): {self.rack}")  
        return self.rack

    def setup_board_layout(self):
        """ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Scrabble ‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤ """
        self.board_layout = np.array(self.board) if self.board is not None else np.full((15, 15), "", dtype=object)

        # ‚úÖ Triple Word (TW) - x3 ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
        for r, c in [(0, 0), (0, 7), (0, 14), (7, 0), (7, 14), (14, 0), (14, 7), (14, 14)]:
            self.board_layout[r, c] = "TW"

        # ‚úÖ Double Word (DW) - x2 ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå
        for r, c in [(1, 1), (2, 2), (3, 3), (4, 4), (1, 13), (2, 12), (3, 11), (4, 10),
                    (13, 1), (12, 2), (11, 3), (10, 4), (13, 13), (12, 12), (11, 11), (10, 10)]:
            self.board_layout[r, c] = "DW"

        # ‚úÖ Triple Letter (TL) - x3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        for r, c in [(1, 5), (1, 9), (5, 1), (5, 5), (5, 9), (5, 13), (9, 1), (9, 5),
                    (9, 9), (9, 13), (13, 5), (13, 9)]:
            self.board_layout[r, c] = "TL"

        # ‚úÖ Double Letter (DL) - x2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        for r, c in [(0, 3), (0, 11), (2, 6), (2, 8), (3, 0), (3, 7), (3, 14), (6, 2),
                    (6, 6), (6, 8), (6, 12), (7, 3), (7, 11), (8, 2), (8, 6), (8, 8),
                    (8, 12), (11, 0), (11, 7), (11, 14), (12, 6), (12, 8), (14, 3), (14, 11)]:
            self.board_layout[r, c] = "DL"

        # ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (STAR) ‡∏ó‡∏µ‡πà 7,7
        self.board_layout[7, 7] = "STAR"

        print("‚úÖ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Scrabble ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

    def get_board_string(self):
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ASCII ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        - ‡πÉ‡∏ä‡πâ '.' ‡πÅ‡∏ó‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        """
        return "\n".join(
            " ".join(str(cell) if cell != "" else '.' for cell in row)
            for row in self.board
        )

    def is_board_empty(self):
        """
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Scrabble ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        return np.all(self.board == "")  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å == 0 ‡πÄ‡∏õ‡πá‡∏ô == ""

    
    def get_valid_positions(self):
        """
        ‚úÖ ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        """
        if self.is_board_empty():
            print("‚úÖ ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà (7,7)")
            return {(7, 7)}

        valid_positions = set()
        used_letters_positions = set()  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

        for row in range(15):
            for col in range(15):
                if self.board[row][col] != "" and self.board[row][col].strip() != "":  
                    used_letters_positions.add((row, col))  # ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                elif self.has_adjacent_letter(row, col):  
                    valid_positions.add((row, col))  # ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ

        print(f"üìå Debug: used_letters_positions -> {used_letters_positions}")
        print(f"üìå Debug: valid_positions ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ -> {valid_positions}")

        return valid_positions  # ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ

    def get_surrounding_positions(self, last_positions):
        """
        ‚úÖ ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏≠‡∏ö‡πÜ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÑ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÜ
        """
        print(f"üìå Debug: last_positions -> {last_positions}")  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

        surrounding_positions = set()

        for row, col in last_positions:
            neighbors = [
                (row-1, col), (row+1, col),
                (row, col-1), (row, col+1)
            ]

            for r, c in neighbors:
                if 0 <= r < 15 and 0 <= c < 15 and self.board[r][c] == "":  # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å 0 ‡πÄ‡∏õ‡πá‡∏ô ""
                    surrounding_positions.add((r, c))

        if not surrounding_positions:
            print("‚ö†Ô∏è get_surrounding_positions() ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ set() ‡∏ß‡πà‡∏≤‡∏á! ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ get_valid_positions() ‡πÅ‡∏ó‡∏ô")
            surrounding_positions = self.get_valid_positions()  # ‚úÖ ‡πÉ‡∏ä‡πâ fallback method
            print(f"üìå Debug: get_valid_positions() fallback -> {surrounding_positions}")

        print(f"üìå Debug: get_surrounding_positions() -> {surrounding_positions}")
        return surrounding_positions





    def has_adjacent_letter(self, row, col):
        """
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (row, col) ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # ‚¨Ü‚¨á‚¨Ö‚û°
        
        for dr, dc in directions:
            nr, nc = row + dr, col + dc
            if 0 <= nr < 15 and 0 <= nc < 15 and self.board[nr][nc] not in ["", " "]:  
                return True  # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True

        return False  # ‚ùå ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢ ‚Üí ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ False







    def letter_score(self, letter):
        """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô Scrabble"""
        letter_values = {
            "A": 1, "B": 3, "C": 3, "D": 2, "E": 1, "F": 4, "G": 2, "H": 4, "I": 1,
            "J": 8, "K": 5, "L": 1, "M": 3, "N": 1, "O": 1, "P": 3, "Q": 10, "R": 1,
            "S": 1, "T": 1, "U": 1, "V": 4, "W": 4, "X": 8, "Y": 4, "Z": 10
        }
        return letter_values.get(letter.upper(), 0)  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0
    
    def get_valid_words_from_db(self):
        if self.word_database is None:
            self.load_word_database()

        if not self.word_database:
            print("‚ùå `word_database` ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ")
            return []

        possible_words = set(self.word_database)  
        rack_counter = Counter(letter.upper() for letter in self.rack_bot)

        valid_words = []
        for word in possible_words:
            word_upper = word.upper()
            word_counter = Counter(word_upper)

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            if len(word_upper) > 2 and all(word_counter[char] <= rack_counter.get(char, 0) for char in word_upper):
                valid_words.append(word_upper)

        # ‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        valid_words.sort(key=len, reverse=True)

        print(f"üìñ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å rack {self.rack_bot}: {valid_words[:10]}")  
        return valid_words


    def filter_valid_word(self, possible_words):
        """
        ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á
        """
        valid_words = []
        existing_letters = {
            (r, c): str(self.board[r][c]).upper() for r in range(15) for c in range(15) if self.board[r][c] != ""
        }

        print(f"üìå Debug: ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô: {existing_letters}")

        valid_positions = self.get_valid_positions()  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ
        print(f"üìå Debug: valid_positions -> {valid_positions}")

        for word in possible_words:
            word_upper = word.upper()
            rack_counter = Counter(letter.upper() for letter in self.rack_bot)
            word_counter = Counter(word_upper)

            can_form = True
            used_board_letters = set()

            if self.is_board_empty():
                # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á ‡∏Ñ‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà (7,7) ‡πÅ‡∏•‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                if len(word) <= 7:
                    valid_words.append(word_upper)
                    continue  # ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà
                else:
                    print(f"‚ùå ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥ '{word_upper}' ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å")
                    continue

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏≠‡∏à‡∏≤‡∏Å rack + ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
            for char in word_upper:
                if word_counter[char] > rack_counter.get(char, 0) + list(existing_letters.values()).count(char):
                    can_form = False
                    break

            # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
            can_place = False
            for pos in valid_positions:
                if self.is_valid_placement(pos[0], pos[1], word_upper, direction=0) or \
                self.is_valid_placement(pos[0], pos[1], word_upper, direction=1):
                    can_place = True
                    break

            if can_form and (self.is_board_empty() or can_place):
                valid_words.append(word_upper)

        print(f"üìñ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á: {valid_words}")  
        return valid_words












    def is_valid_placement(self, row, col, word, direction):
        """
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î (row, col) ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        if self.is_board_empty():
            if direction == 0 and not any(c == 7 for c in range(col, col + len(word))):
                print(f"‚ùå ‡∏Ñ‡∏≥ '{word}' ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (7,7)")
                return False
            elif direction == 1 and not any(r == 7 for r in range(row, row + len(word))):
                print(f"‚ùå ‡∏Ñ‡∏≥ '{word}' ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (7,7)")
                return False
            return True  

        if direction == 0 and (col + len(word) > 15):
            return False
        if direction == 1 and (row + len(word) > 15):
            return False

        has_adjacent = False
        used_existing_letters = False  

        for i, letter in enumerate(word):
            r, c = (row, col + i) if direction == 0 else (row + i, col)

            if self.board[r][c] != "" and self.board[r][c] != letter:
                print(f"‚ùå ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ({r}, {c}) ‡∏°‡∏µ '{self.board[r][c]}' ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                return False  

            if self.has_adjacent_letter(r, c):
                has_adjacent = True

            if self.board[r][c] != "":  
                used_existing_letters = True

        if not has_adjacent and not self.is_board_empty():
            print(f"‚ùå ‡∏Ñ‡∏≥ '{word}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô")
            return False

        if not used_existing_letters and not self.is_board_empty():
            print(f"‚ùå ‡∏Ñ‡∏≥ '{word}' ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô")
            return False

        print(f"‚úÖ ‡∏Ñ‡∏≥ '{word}' ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà ({row}, {col}) ‡πÑ‡∏î‡πâ")
        return True

    def place_word(self, word, row, col, direction):
        """
        ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏≤‡∏á
        """
        if not self.is_valid_placement(row, col, word, direction):
            print(f"‚ùå ERROR: ‡∏Ñ‡∏≥ '{word}' ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà ({row}, {col}) ‡πÑ‡∏î‡πâ")
            return False

        placed_positions = []

        # ‚úÖ ‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏•‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
        for i, letter in enumerate(word):
            r, c = (row, col + i) if direction == 0 else (row + i, col)

            if self.board[r][c] == "":  # ‚úÖ ‡πÉ‡∏ä‡πâ "" ‡πÅ‡∏ó‡∏ô 0
                self.board[r][c] = letter
                placed_positions.append((r, c))

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á
        new_words = self.get_new_words(placed_positions)

        # ‚ùå **‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
        invalid_words = [new_word for new_word in new_words if new_word.lower() not in self.word_database]

        if invalid_words:
            print(f"‚ùå ERROR: ‡∏Ñ‡∏≥ {invalid_words} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á")
            
            # ‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°
            for r, c in placed_positions:
                self.board[r][c] = ""  # ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ß‡∏≤‡∏á‡πÑ‡∏õ
            return False

        # ‚úÖ ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏à‡∏≤‡∏Å rack
        self.remove_used_letters(word, row, col, direction)

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
        if self.is_first_move:
            self.is_first_move = False

        self.print_board()
        return True


    
    def remove_used_letters(self, word, row, col, direction):
        """
        ‚úÖ ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å rack ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        print(f"üìå Debug: remove_used_letters -> ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö rack: {self.rack}")
        
        new_rack = list(self.rack_bot)  # ‚úÖ ‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ rack ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

        for i, letter in enumerate(word):
            r, c = (row, col + i) if direction == 0 else (row + i, col)

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å rack
            if (self.board[r][c] == letter) and (letter in new_rack):
                new_rack.remove(letter)  # ‚ùå ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ä‡πâ‡∏ú‡∏¥‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                print(f"‚úÖ ‡∏•‡∏ö '{letter}' ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å rack (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {r}, {c})")

        self.rack_bot = new_rack  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï rack ‡πÉ‡∏´‡∏°‡πà
        print(f"‚úÖ Debug: remove_used_letters -> ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö rack: {self.rack}")





    def calculate_score(self, word, row, col, direction):
        """
        ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        """
        base_score = 0
        word_multiplier = 1
        placed_positions = []

        for i, letter in enumerate(word):
            r, c = (row, col + i) if direction == 0 else (row + i, col)
            letter_value = self.letter_score(letter)

            if self.board[r][c] != "" and self.board[r][c] != letter:
                base_score += letter_value
                continue

            placed_positions.append((r, c))

            cell_type = self.board_layout[r][c]
            if cell_type == "DL":
                base_score += letter_value * 2
            elif cell_type == "TL":
                base_score += letter_value * 3
            elif cell_type in ["DW", "STAR"]:
                word_multiplier *= 2
                base_score += letter_value
            elif cell_type == "TW":
                word_multiplier *= 3
                base_score += letter_value
            else:
                base_score += letter_value

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á
        new_words = self.get_new_words(placed_positions)
        additional_score = 0

        for new_word in new_words:
            if new_word.lower() not in self.word_database:
                print(f"‚ùå ERROR: ‡∏Ñ‡∏≥ '{new_word}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 0")
                return 0  # ‚ùå **‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ**

            word_score = sum(self.letter_score(letter) for letter in new_word)
            additional_score += word_score

        total_score = (base_score * word_multiplier) + additional_score
        print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á '{word}' ‡πÑ‡∏î‡πâ {total_score} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
        return total_score




    def get_word_vertical(self, row, col):
        """
        ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
        ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ("") ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏ß‡∏°
        """
        start_row = row
        while start_row > 0 and self.board[start_row - 1][col] != "":
            start_row -= 1

        end_row = row
        while end_row < 14 and self.board[end_row + 1][col] != "":
            end_row += 1

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        word = ""
        for r in range(start_row, end_row + 1):
            if self.board[r][col] == "":
                break  # ‡πÄ‡∏à‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
            word += self.board[r][col]

        print(f"üîç get_word_vertical({row}, {col}) -> '{word}'")
        return word.strip()


    def get_word_horizontal(self, row, col):
        """
        ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
        ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ("") ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏ß‡∏°
        """
        start_col = col
        while start_col > 0 and self.board[row][start_col - 1] != "":
            start_col -= 1

        end_col = col
        while end_col < 14 and self.board[row][end_col + 1] != "":
            end_col += 1

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        word = ""
        for c in range(start_col, end_col + 1):
            if self.board[row][c] == "":
                break  # ‡πÄ‡∏à‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
            word += self.board[row][c]

        print(f"üîç get_word_horizontal({row}, {col}) -> '{word}'")
        return word.strip()



    def get_new_words(self, word_positions):
        new_words = set()

        for r, c in word_positions:
            vertical_word = self.get_word_vertical(r, c)
            horizontal_word = self.get_word_horizontal(r, c)

            print(f"üîç ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á: '{vertical_word}', ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô: '{horizontal_word}'")

            if len(vertical_word) > 1:
                new_words.add(vertical_word)

            if len(horizontal_word) > 1:
                new_words.add(horizontal_word)

        print(f"‚úÖ ‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö: {new_words}")
        return list(new_words)


    def should_exchange_tiles(self):
        possible_words = self.get_valid_words_from_db()
        valid_words = self.filter_valid_word(possible_words)  # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ self.valid_words

        return len(valid_words) == 0 and len(self.rack) > 0 and len(self.tile_bag) > len(self.rack)




    def exchange_tiles(self):
        if self.should_exchange_tiles():
            num_to_exchange = min(7, len(self.rack))  # ‚úÖ ‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏ï‡∏±‡∏ß
            tiles_to_exchange = random.sample(self.rack, num_to_exchange)

            # üîÑ ‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
            self.tile_bag.extend(tiles_to_exchange)

            # ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å rack
            self.rack = [tile for tile in self.rack if tile not in tiles_to_exchange]

            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
            random.shuffle(self.tile_bag)  # ‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á
            for _ in range(num_to_exchange):
                if self.tile_bag:
                    self.rack.append(self.tile_bag.pop())

            print(f"üîÑ ‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ {tiles_to_exchange} ‚Üí ‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà {self.rack}")
            return tiles_to_exchange



    def select_word_from_rack(self):
        """
        ‚úÖ ‡∏ö‡∏≠‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô rack ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
        """
        print(f"üõ†Ô∏è ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å rack -> board type: {type(self.board)}")
        possible_words = self.get_valid_words_from_db()
        valid_words = self.filter_valid_word(possible_words)

        if not valid_words:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ ‚Üí ‡∏ö‡∏≠‡∏ó pass ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
            return {"move": "pass"}  # ‚úÖ ‡πÑ‡∏°‡πà‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß

        valid_positions = self.get_valid_positions()
        print(f"üìå Debug: get_valid_positions() -> {valid_positions}")

        best_placement = self.find_best_placement(valid_words, valid_positions)
        if best_placement is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ ‚Üí ‡∏ö‡∏≠‡∏ó pass ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
            return {"move": "pass"}  

        best_word, best_position = best_placement
        print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥ '{best_word}' ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {best_position}")
        return {"move": "play", "word": best_word, "position": best_position}




    def find_best_placement(self, valid_words, last_positions):
        if not valid_words:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ")
            return None

        best_position = None
        best_score = -1
        best_word = None

        valid_positions = self.get_valid_positions()
        print(f"üîç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ: {valid_positions}")

        for word in valid_words:
            for row, col in valid_positions:
                for direction in [0, 1]:  # ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô, ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
                    if self.is_valid_placement(row, col, word, direction):
                        score = self.calculate_score(word, row, col, direction)
                        print(f"üìå ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡∏≤‡∏á '{word}' ‡∏ó‡∏µ‡πà ({row}, {col}) -> ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}")

                        if score > best_score:
                            best_score = score
                            best_position = (row, col, direction)
                            best_word = word

        if best_position:
            print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥ '{best_word}' ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á {best_position} (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {best_score})")
            return best_word, best_position

        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢")
        return None






    def get_placed_positions(self, word, row, col, direction):
        """
        ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á
        """
        return [(row + i, col) if direction == 1 else (row, col + i) for i in range(len(word))]

    def get_state(self):
        """
        ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Scrabble)
        """
        def letter_to_score(letter):
            """‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Scrabble"""
            if letter == "":
                return 0
            return self.letter_score(letter)  # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å self

        board_numeric = np.vectorize(letter_to_score)(self.board)  # ‡πÉ‡∏ä‡πâ vectorized function
        return board_numeric.astype(np.float32)  # ‚úÖ return ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô

    
    def get_game_state(self):
        return {
            "board": self.board.tolist(),  
            "rack_player1": self.rack,  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            "rack_player2": self.rack_bot,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° rack ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢
            "tile_bag": self.tile_bag
        }


    def step(self, action):
        """
        ‚úÖ PPO ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å step() ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á action ‡∏°‡∏≤
        - action = [row, col, direction]
        - ‡πÉ‡∏ä‡πâ action ‡∏ô‡∏µ‡πâ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏•‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
        - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô reward
        - ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ (state ‡πÉ‡∏´‡∏°‡πà, reward, done, info)
        """
        row, col, direction = action

        # ‚úÖ ‡∏´‡∏≤ "‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡∏à‡∏≤‡∏Å rack ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏•‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        move = self.select_word_from_rack()

        if move["move"] == "exchange":
            exchanged_tiles = move["tiles"]
            print(f"üîÑ ‡∏ö‡∏≠‡∏ó‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£: {exchanged_tiles}")

            # ‚úÖ ‡∏•‡∏î penalty ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            return self.get_state(), -1, False, {}

        if move["move"] == "pass":
            print("üö´ ‡∏ö‡∏≠‡∏ó‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤")
            
            # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ pass ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏à‡∏ö‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            return self.get_state(), -5, False, {}

        # ‚úÖ ‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        word, placement = move["word"], move["position"]
        row, col, direction = placement
        success = self.place_word(word, row, col, direction)

        if success:
            score = self.calculate_score(word, row, col, direction)

            # ‚úÖ ‡πÉ‡∏´‡πâ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô
            has_adjacent = any(self.has_adjacent_letter(row + (i if direction == 1 else 0),
                                                        col + (i if direction == 0 else 0))
                                for i in range(len(word)))
            
            bonus = 5 if has_adjacent else 0  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ PPO ‡∏ä‡∏≠‡∏ö‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
            reward = score + bonus  

            print(f"‚úÖ ‡∏ß‡∏≤‡∏á '{word}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score} (+{bonus} bonus)")

            self.remove_used_letters(word, row, col, direction)
            self.draw_tiles()
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á '{word}' ‡πÑ‡∏î‡πâ")
            reward = -3  # ‚ùå ‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô PPO ‡∏ß‡∏≤‡∏á‡∏û‡∏•‡∏≤‡∏î‡∏ö‡πà‡∏≠‡∏¢ ‡πÜ

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        done = len(self.rack) == 0 or not self.tile_bag

        return self.get_state(), reward, done, {}




    def print_board(self):
        """
        ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Scrabble ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ '.' ‡πÅ‡∏ó‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        """
        print("\nüìå ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô Scrabble:\n")
        board_str = "\n".join(
            " ".join(str(cell) if cell != "" else '.' for cell in row) for row in self.board
        )
        print(board_str)




    
    

    
 


    
    

